---
import Layout from '../layouts/Layout.astro'
import { slug } from '../lib/utils/guide'
let guides = await Astro.glob('/../guides/*.md')
guides = guides.map(guide => ({ ...guide, title: guide.frontmatter.title }))

export const prerender = true
---

<Layout
  title="Guides"
  description="A gallery of various guides created by Hack Clubbers."
  navbar={true}>
  <style is:global lang="scss">
    @import '../ui/variables.scss';

    :root {
      --gallery-width-desktop: 80vw;
      --gallery-width-mobile: calc(100vw - 2rem);
      --gallery-gap: 7px;
    }

    #container {
      display: flex;
      justify-content: space-between;
      position: relative;
    }

    #gallery {
      margin: auto;
      align-items: center;
      justify-content: center;
      flex-wrap: wrap;
      gap: var(--gallery-gap);
      width: var(--gallery-width-mobile);
      padding: 2rem 0;
      position: relative;
      display: flex;

      @media screen and (max-width: $md) {
        flex-direction: column;
      }

      @media screen and (min-width: $lg) {
        width: var(--gallery-width-desktop);
      }
    }

    .frame {
      border: 0.5px solid var(--primary);
      position: relative;

      &:hover .overlay {
        opacity: 0.9;
      }

      img {
        background-color: white;
        display: block;
        width: 100%;

        @media screen and (min-width: $md) {
          object-fit: contain;
          height: calc(var(--gallery-width-desktop) / 3 - 28px);
          width: calc(var(--gallery-width-desktop) / 3 - 28px);
        }
      }
    }

    .overlay {
      cursor: pointer;
      border: 0;
      position: absolute;
      top: 0;
      bottom: 0;
      left: 0;
      right: 0;
      height: 100%;
      width: 100%;
      opacity: 0;
      transition: 0.2s ease;
      background-color: #ddd;
      display: flex;
      font-family: var(--serif);
      flex-direction: column;
      align-items: center;
      justify-content: center;
      text-decoration: none;
      text-align: center;

      p {
        color: black;
        font-size: 1.5rem;
        margin: 0;

        @media screen and (max-width: $md) {
          line-height: 1.1;
        }
      }
    }

    header {
      line-height: 1;
      padding: 3rem 2rem;
      background-image: linear-gradient(to right, #ddd 1px, transparent 1px),
        linear-gradient(to bottom, #ddd 1px, transparent 1px);
      background-size: 40px 40px;
      box-shadow: inset 0 4px 8px 8px rgba(0, 0, 0, 0.1);
      margin: auto;
      text-align: center;

      h1 {
        margin: 0;
        margin-bottom: 0.75rem;
        letter-spacing: -4px;
      }

      @media screen and (max-width: $lg) {
        font-size: 2rem;
      }

      @media screen and (min-width: $lg) {
        font-size: 3rem;
      }

      p {
        font-family: var(--sans-serif);
        font-size: 1.5rem;
        line-height: 1.3;
        letter-spacing: -1px;
        margin: auto;

        @media screen and (max-width: $lg) {
          font-size: 1.3rem;
          margin-bottom: 0.5rem;
        }

        @media screen and (min-width: $md) {
          max-width: 50vw;
        }
      }
    }

    #search {
      background-color: white;
      border: 2px solid;
      font-family: var(--mono);
      font-size: 1.3rem;
      padding: 9px 12px;
      min-width: 50vw;

      @media screen and (max-width: $lg) {
        font-size: 1.1rem;
        width: 100%;
      }
    }
  </style>

  <header>
    <h1>Guides</h1>
    <p>A gallery of various guides created by Hack Clubbers.</p>
    <input
      autocomplete="off"
      id="search"
      placeholder="Search guides"
      type="text"
    />
  </header>
  <div id="container">
    <div id="gallery">
      {
        guides
          .sort((a, b) =>
            a.frontmatter.pinned ? -1 : b.frontmatter.pinned ? 1 : 0
          )
          .map(guides => {
            return (
              <div class="frame">
                <img class="thumbnail" src={guides.frontmatter.thumbnail} />
                <div class="overlay">
                  <div class="prose">
                    <p style={{ fontWeight: 'bold' }}>
                      {guides.frontmatter.title}
                    </p>
                    <a href={`/editor?guide=${slug(guides.file)}`}>
                      Open in editor
                    </a>{' '}
                    &middot;{' '}
                    <a href={`/guide/${slug(guides.file)}`}>Open as guide</a>
                  </div>
                </div>
              </div>
            )
          })
      }
    </div>
  </div>

  <script define:vars={{ guides }}>
    window.filterGuides = (query, filter, slug) => {
      const results = filter(guides, query, { key: 'title' })
      const gallery = document.getElementById('gallery')
      gallery.innerHTML = ''
      for (let guides of results) {
        let frame = document.createElement('div')
        frame.classList.add('frame')
        frame.innerHTML = `
          <img class="thumbnail" src="${guides.frontmatter.thumbnail}"/>
          <div class="overlay">
            <div class="prose">
              <p style="font-weight: bold;">${guides.frontmatter.title}</p>
              <a href="${`/editor?guide=${slug(
                guides.file
              )}`}">Open in editor</a> &middot; <a href="/guide/${slug(
                guides.file
              )}">Open as guide</a>
            </div>
          </div>
        `
        gallery.appendChild(frame)
      }
    }
  </script>
  <script>
    import { filter } from 'fuzzaldrin'
    import { slug } from '../lib/utils/guide'

    document.querySelectorAll('.overlay a').forEach(link => {
      link.addEventListener('click', event => {
        event.stopImmediatePropagation()
        event.stopPropagation()
      })
    })

    document.querySelector('#search').addEventListener('input', event => {
      const query = event.target.value
      window.filterGuides(query, filter, slug)
    })
  </script>
</Layout>
