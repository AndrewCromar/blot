---
import { firestore, getArt, getSession } from '../../lib/db/account.ts'
import { signal } from '@preact/signals'
import type { PersistenceState } from '../../lib/persist.ts'
import { mobileUserAgent } from '../../lib/utils/mobile'
import Editor from '../../components/~/Editor.tsx'
import EditorLayout from '../../layouts/EditorLayout.astro'
import { render } from '../../lib/render.tsx'
import { init } from '../../lib/init.js'
import '../../ui/editor-theme.css'
import '../../css/global.css'

const session = await getSession(Astro.cookies)
if (!session) return Astro.redirect(`/login?to=${Astro.request.url}`, 302)

const art = await getArt(Astro.params.id!)
if (!art || art.ownerId !== session.user.id) return Astro.redirect('/404', 302)

const fileRegexp = /^.*\/(.+)-(\d+)\.md$/

let tutorial: string[] | undefined
let tutorialIndex: number | undefined
if (art.tutorialName) {
  const files = await Astro.glob('/guides/*.md')
  tutorial = files
    .filter(file => {
      const regexedFile = file.file.match(fileRegexp)
      return regexedFile && regexedFile[1] === art.tutorialName
    })
    ?.map(md => md.compiledContent())
  tutorialIndex = art.tutorialIndex
}

let _persistenceState: PersistenceState
if (session.session.full) {
  if (art.unprotected) {
    await firestore.collection('art').doc(art.id).update({ unprotected: false })
    art.unprotected = false
  }
  if (Astro.cookies.get('blotTempArt')?.value === art.id)
    Astro.cookies.delete('blotTempArt', { path: '/' })

  _persistenceState = {
    kind: 'PERSISTED',
    session,
    cloudSaveState: 'SAVED',
    art,
    tutorial,
    tutorialIndex,
    stale: false
  }
} else {
  if (!art.unprotected)
    return Astro.redirect(`/login?to=${Astro.request.url}`, 302)
  if (art.ownerId !== session.user.id) return Astro.redirect('/404', 302)

  _persistenceState = {
    kind: 'PERSISTED',
    session,
    cloudSaveState: 'SAVED',
    art,
    tutorial,
    tutorialIndex,
    stale: false
  }
}

const persistenceState = signal<PersistenceState>(_persistenceState)
const isMobile = mobileUserAgent(Astro.request.headers.get('user-agent') ?? '')

export const prerender = false
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Blot editor!" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />

    <!-- Prism CSS -->
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.25.0/themes/prism.min.css"
      rel="stylesheet"
    />
    <!-- Prism JS -->
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.25.0/prism.min.js"
    ></script>

    <meta name="generator" content={Astro.generator} />
    <title>Blot</title>
  </head>
  <body>
    <main></main>
    <script src="../../lib/initApp.js"></script>
  </body>
</html>
