---
import LoginModal from '../../components/~/LoginModal'
import { firestore, getSession } from '../../db/account'
import ms from 'ms'
import { isRandomName } from '../../lib/utils/words'
import type { Art } from '../../db/account'
import Layout from '../../layouts/Layout.astro'

let loggedIn = true
let art, allArt, unnamedArt

const session = await getSession(Astro.cookies)
if (!session || !session.session.full) {
  loggedIn = false
} else {
  const _art = await firestore
    .collection('art')
    .where('ownerId', '==', session.user.id)
    .get()
  allArt = _art.docs.map(doc => ({ id: doc.id, ...doc.data() }) as Art)

  art = allArt.filter(art => !isRandomName(art.name))
  unnamedArt = allArt.filter(art => isRandomName(art.name))

  if (art.length === 0 && unnamedArt.length > 0) {
    art = unnamedArt
    unnamedArt = []
  }
}

export const prerender = false
---

<Layout navbar={true} loginLink={false}>
  <style is:global lang="scss">
    @import '../../ui/variables.scss';

    :root {
      --gallery-width-desktop: 80vw;
      --gallery-width-mobile: calc(100vw - 2rem);
      --gallery-gap: 7px;
    }

    #container {
      display: flex;
      position: relative;
      min-height: 100vh;
    }

    #sidebar {
      border-right: 0.5px solid #ddd;
      padding: 2rem;
    }
  </style>

  <div id="container">
    <div id="sidebar">
      {
        loggedIn === true && (
          <>
            <a href="/logout">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
                class="lucide lucide-log-out">
                <polyline points="16 17 21 12 16 7" />
                <>
                  <path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4" />
                  <line x1="21" x2="9" y1="12" y2="12" />
                </>
              </svg>
            </a>
          </>
        )
      }
    </div>
    <div id="projects">
      {
        loggedIn === true && (
          <>
            <div>
              {art.map(piece => (
                <a class="piece" href={`/~/${piece.id}`}>
                  <h3>{piece.name || 'Untitled'}</h3>
                  <p class="modified-at">
                    Edited{' '}
                    {ms(
                      Math.max(Date.now() - piece.modifiedAt.toMillis(), 1000),
                      {
                        long: true
                      }
                    )}{' '}
                    ago
                  </p>
                  <button
                    class="delete"
                    data-id={piece.id}
                    data-name={piece.name || 'Untitled'}>
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      width="24"
                      height="24"
                      viewBox="0 0 24 24"
                      fill="none"
                      stroke="currentColor"
                      stroke-width="2"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      class="lucide lucide-trash-2">
                      <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6" />
                      <path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2" />
                      <line x1="10" x2="10" y1="11" y2="17" />
                      <>
                        <path d="M3 6h18" />
                        <line x1="14" x2="14" y1="11" y2="17" />
                      </>
                    </svg>
                  </button>
                </a>
              ))}
            </div>
            <div>
              {unnamedArt.length > 0 && (
                <div class="unnamed">
                  <h2>Unnamed art</h2>
                  <div class="art">
                    {unnamedArt.map(piece => (
                      <a class="piece" href={`/~/${piece.id}`}>
                        <h3>{piece.name || 'Untitled'}</h3>
                        <p class="modified-at">
                          Edited{' '}
                          {ms(
                            Math.max(
                              Date.now() - piece.modifiedAt.toMillis(),
                              1000
                            ),
                            { long: true }
                          )}{' '}
                          ago
                        </p>
                        <button
                          class="delete"
                          data-id={piece.id}
                          data-name={piece.name || 'Untitled'}>
                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            width="24"
                            height="24"
                            viewBox="0 0 24 24"
                            fill="none"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            class="lucide lucide-trash-2">
                            <path d="M3 6h18" />
                            <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6" />
                            <path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2" />
                            <line x1="10" x2="10" y1="11" y2="17" />
                            <line x1="14" x2="14" y1="11" y2="17" />
                          </svg>
                        </button>
                      </a>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </>
        )
      }
    </div>
    {loggedIn === false ? <LoginModal client:only /> : (
      <script>
        console.log("Delete")
        document.body.addEventListener("click", async event  => {
          const deleteBtn = event.composedPath().find(item => item instanceof HTMLElement && item.matches(".delete") as HTMLElement | undefined)
          if (!deleteBtn) return
          event.preventDefault()
          const artId = deleteBtn.dataset.id!
          const artName = deleteBtn.dataset.name!
          if (!confirm(`Are you sure you want to delete "${artName}"?`)) return
          deleteBtn.closest('.art')!.remove()
          
          const res = await fetch(`/api/art/delete`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ artId })
          })
          if (!res.ok) console.error(`Error deleting art: ${await res.text()}`)
          window.location.reload()
        })
      </script>
    )}
  </div>
</Layout>
